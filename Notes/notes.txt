NODE.JS REST APIs:

    REST APIs are used to access and manipulate data using a common set of stateless operations.
    These operations are integral to the HTTP protocol and represent essential create, read, update,
    and delete (CRUD) functionality, although not in a clean one-to-one manner.

    The HTTP Operations Here are:
		POST -(create a resource or generally provide data).
		GET -(retrieve an index of resources or an individual resource).
		PUT -(create or replace a resource).
		PATCH -(update/modify a resource).
		DELETE -(remove a resource).

    Download Node.js, npm && Postman.

    LINKS FOR FURTHER READING:
        https://www.toptal.com/nodejs/secure-rest-api-in-nodejs
        https://www.edureka.co/blog/rest-api-with-node-js/
        https://hevodata.com/learn/building-a-secure-node-js-rest-api/
        https://www.makeuseof.com/beginners-guide-to-restful-apis-in-nodejs/
	  https://r.bluethl.net/how-to-design-better-apis

    ES6 Concepts Review:
		https://www.syncfusion.com/blogs/post/top-6-javascript-es12-features-you-should-use.aspx
    a) Objects && Arrays Destructuring:
            https://linuxhint.com/destructure-object-arrays-in-javascript-examples/
            https://www.freecodecamp.org/news/array-and-object-destructuring-in-javascript/
            https://medium.com/geekculture/javascript-es6-array-and-object-destructuring-end-to-end-b3f23cb9968f
            https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment

    b) Spread Oprator(...):
            https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax
            https://www.javascripttutorial.net/es6/javascript-spread/
            https://www.geeksforgeeks.org/javascript-spread-operator/

    c) Promises with async-Await:
            https://javascript.info/async
            https://javascript.info/promise-api
            https://javascript.info/async-await
            https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Asynchronous/Promises
            https://medium.com/@prabhur24/es6-for-beginners-promises-async-await-operations-dc07494362b9
            https://betterprogramming.pub/should-i-use-promises-or-async-await-126ab5c98789
            https://www.freecodecamp.org/news/javascript-async-await-tutorial-learn-callbacks-promises-async-await-by-making-icecream/



=============================================>>>> 
		Here I'm creating two REST APIs;
				1) PRODUCTS API
				2) USER-SIGNUP API
				3) API-DOCUMENTATION(SWAGGER)
=============================================>>>>


1) PRODUCTS API::

NODE-API:
    mkdir node-api
    cd into folder, npm init
    Packages to install:
            npm install express mongoose  dotenv --save
            npm install -D nodemon --save   // for restarting the server upon changes.
		npm install ejs-mate --save

    Using middleware:
        https://expressjs.com/en/guide/using-middleware.html

    Install Cors Package:
        https://www.npmjs.com/package/cors
            npm install cors --save

    a) Creating the POST ROUTE:
        Create the Model_Schema of your collection,
        Create the Controller and Service by importing the neccessary routes.
        Test the POST method with POSTMAN.

        => "toObject" Mongoose Model_Schema:
            Documents have a toObject method which converts the mongoose document into a plain JavaScript object.
                https://mongoosejs.com/docs/api.html#document_Document-toObject
                https://mongoosejs.com/docs/api.html#schematypeoptions_SchemaTypeOptions-transform
                https://stackoverflow.com/questions/7503450/how-do-you-turn-a-mongoose-document-into-a-plain-object
                https://alexanderzeitler.com/articles/mongoose-tojson-toobject-transform-with-subdocuments/

	Errors and Validating Data::
	1) Client-Side Validation:
					https://getbootstrap.com/docs/5.1/forms/validation/

	2) Server-Side Validation:
		Using JOI for Schema and data Validation for Javascript
			https://joi.dev/api/?v=17.6.0


        => "@hapi/joi" npm
            Hapi Joi is an object schema description language and validator for JavaScript objects.
            With Hapi Joi, we create blueprints or schemas for JavaScript objects (an object that stores information) to ensure validation of key information.
            However, this package has been deprecated, so we'll;
                Switch to 'npm install joi --save'
            https://www.npmjs.com/package/joi
            https://joi.dev/api/?v=17.6.0
		https://softchris.github.io/pages/joi.html#introducing-joi
		https://www.digitalocean.com/community/tutorials/how-to-use-joi-for-node-api-schema-validation

	b) Implementing the GET ROUTE:
		Create the Controller and Service by importing the neccessary routes.
		Create a dbHelper script to display the result into an object(s).
        	Test the GET(all) method with POSTMAN.
            
		Adding Pagination on the GET(all) ROUTE:
		Create the Pagination JOI-Schema and implement it to the validations middleware.
		Modify the GET service method to fit your pagination JOI-Schema.


		GET Product by Id:
		Works same as GET(all), we only need to parse the "id".

	
	c) Implementing the PUT ROUTE:
		Create the Controller and Service by importing the neccessary routes.
		Create the JOI Schema model.
        	Test the PUT(/:Id) method with POSTMAN.

	d) Implementing the DELETE ROUTE:
		Create the Controller and Service by importing the neccessary routes.
        	Test the DELETE(/:Id) method with POSTMAN.




2) USER-SIGNUP REST API:
	
	a) Creating the User-SIGNUP POST-ROUTE:
         	Create the Model_Schema of your Users_collection,
         	Create the Controller and Service by importing the neccessary routes.
		Using JOI for Schema and data Validation for Javascript.
		
		Using ==>> node.bcrypt.js (A library to help you hash passwords.):
			https://www.npmjs.com/package/bcrypt
				npm install bcrypt --save

         	Test the POST(user-signup) method with POSTMAN.

	b) Creating the User-LOGIN POST-ROUTE Using JWT(Json Web Token):
			https://www.section.io/engineering-education/how-to-build-authentication-api-with-jwt-token-in-nodejs/
			https://medium.com/swlh/nodejs-with-jwt-authentication-feb961763541
			https://www.freecodecamp.org/news/securing-node-js-restful-apis-with-json-web-tokens-9f811a92bb52/

         	Create the Model_Schema of your Users_collection,
         	Create the Controller and Service by importing the neccessary routes.
		Using JOI for Schema and data Validation for Javascript.
		
		Using ==>> node.bcrypt.js (A library to help you hash passwords):
			https://www.npmjs.com/package/bcrypt
				npm install bcrypt --save

		Using ==>> jsonwebtoken:
			https://www.npmjs.com/package/jsonwebtoken
				npm install jsonwebtoken --save

         	Test the POST(user-login) method with POSTMAN.
		Test your decoded password token through:
							https://jwt.io/


	c) Securing the Products API Using JWT:
		With this, only logged-in users can access the products API End-Points.
		Configure the products token validation and add it on all the Product-ROTES, this enhances security.


3) Documenting REST-API with Swagger:
		https://dev.to/przpiw/document-express-api-with-swagger-51in
		https://blog.tericcabrel.com/document-a-node-js-rest-api-with-swagger-and-open-api/
		https://www.javacodegeeks.com/api-documentation-in-node-js-using-swagger.html
		https://javascript.plainenglish.io/how-to-implement-and-use-swagger-in-nodejs-d0b95e765245
	
	https://app.swaggerhub.com/home
	Go to => https://editor.swagger.io/  // to start documenting your API.

	OR
	Install the Swagger UI Express on your project:
		https://www.npmjs.com/package/swagger-ui-express
			npm install swagger-ui-express
			npm install swagger-ui-express yamljs
	


















MORE READS::

https://mannhowie.com/clean-architecture-node
https://itnext.io/clean-architecture-making-node-js-api-shine-38134b8f9b5c
https://medium.com/dhiwise/features-of-clean-code-architecture-node-js-9a7ecac84d5c#
    