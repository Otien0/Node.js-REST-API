NODE.JS REST APIs:

    REST APIs are used to access and manipulate data using a common set of stateless operations.
    These operations are integral to the HTTP protocol and represent essential create, read, update,
    and delete (CRUD) functionality, although not in a clean one-to-one manner.

    The HTTP Operations Here are:
		POST -(create a resource or generally provide data).
		GET -(retrieve an index of resources or an individual resource).
		PUT -(create or replace a resource).
		PATCH -(update/modify a resource).
		DELETE -(remove a resource).

    Download Node.js, npm && Postman.

    LINKS FOR FURTHER READING:
        https://www.toptal.com/nodejs/secure-rest-api-in-nodejs
        https://www.edureka.co/blog/rest-api-with-node-js/
        https://hevodata.com/learn/building-a-secure-node-js-rest-api/
        https://www.makeuseof.com/beginners-guide-to-restful-apis-in-nodejs/

    ES6 Concepts Review:
    a) Objects && Arrays Destructuring:
            https://linuxhint.com/destructure-object-arrays-in-javascript-examples/
            https://www.freecodecamp.org/news/array-and-object-destructuring-in-javascript/
            https://medium.com/geekculture/javascript-es6-array-and-object-destructuring-end-to-end-b3f23cb9968f
            https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment

    b) Spread Oprator(...):
            https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax
            https://www.javascripttutorial.net/es6/javascript-spread/
            https://www.geeksforgeeks.org/javascript-spread-operator/

    c) Promises with async-Await:
            https://javascript.info/async
            https://javascript.info/promise-api
            https://javascript.info/async-await
            https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Asynchronous/Promises
            https://medium.com/@prabhur24/es6-for-beginners-promises-async-await-operations-dc07494362b9
            https://betterprogramming.pub/should-i-use-promises-or-async-await-126ab5c98789
            https://www.freecodecamp.org/news/javascript-async-await-tutorial-learn-callbacks-promises-async-await-by-making-icecream/


NODE-API:
    mkdir node-api
    cd into folder, npm init
    Packages to install:
            npm install express mongoose  dotenv --save
            npm install -D nodemon --save   // for restarting the server upon changes.

    Using middleware:
        https://expressjs.com/en/guide/using-middleware.html

    Install Cors Package:
        https://www.npmjs.com/package/cors
            npm install cors --save

    a) Creating the POST ROUTE:
        Create the Model_Schema of your collection,
        Create the Controller and Service by importing the neccessary routes.
        Test the POST method with POSTMAN.

        => "toObject" Mongoose Model_Schema:
            Documents have a toObject method which converts the mongoose document into a plain JavaScript object.
                https://mongoosejs.com/docs/api.html#document_Document-toObject
                https://mongoosejs.com/docs/api.html#schematypeoptions_SchemaTypeOptions-transform
                https://stackoverflow.com/questions/7503450/how-do-you-turn-a-mongoose-document-into-a-plain-object
                https://alexanderzeitler.com/articles/mongoose-tojson-toobject-transform-with-subdocuments/

	Errors and Validating Data::
	1) Client-Side Validation:
					https://getbootstrap.com/docs/5.1/forms/validation/

	2) Server-Side Validation:
		Using JOI for Schema and data Validation for Javascript
			https://joi.dev/api/?v=17.6.0


        => "@hapi/joi" npm
            Hapi Joi is an object schema description language and validator for JavaScript objects.
            With Hapi Joi, we create blueprints or schemas for JavaScript objects (an object that stores information) to ensure validation of key information.
            However, this package has been deprecated, so we'll;
                Switch to 'npm install joi --save'
            https://www.npmjs.com/package/joi
            https://joi.dev/api/?v=17.6.0
		https://softchris.github.io/pages/joi.html#introducing-joi
		https://www.digitalocean.com/community/tutorials/how-to-use-joi-for-node-api-schema-validation
            

    